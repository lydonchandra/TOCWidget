<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010-2011 Esri. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////
-->
<!---
@private
-->
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:mx="library://ns.adobe.com/flex/mx"
                   xmlns:esri="http://www.esri.com/2008/ags"
				   xmlns:Toc="widgets.TOC.toc.tocClasses.*"
				   width="{menuListDG.width + 4}" 
				   height="{menuListDG.height + 2}"
                   cornerRadius="4"
                   backgroundColor="{getStyle('contentBackgroundColor')}"
                   borderColor="{getStyle('accentColor')}"
                   initialize="bordercontainer1_initializeHandler(event)"
                   rollOut="bordercontainer1_rollOutHandler(event)"
                   rollOver="bordercontainer1_rollOverHandler(event)">
    <fx:Script>
        <![CDATA[
			import com.esri.ags.Map;
			import com.esri.ags.events.GeometryServiceEvent;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.layers.FeatureLayer;
			import com.esri.ags.layers.KMLLayer;
			import com.esri.ags.layers.Layer;
			import com.esri.ags.layers.OpenStreetMapLayer;
			import com.esri.ags.layers.WMSLayer;
			import com.esri.ags.tasks.GeometryServiceSingleton;
			import com.esri.ags.utils.WebMercatorUtil;
			import com.esri.viewer.AppEvent;
			import com.esri.viewer.ViewerContainer;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.managers.PopUpManagerChildList;
			import mx.rpc.AsyncResponder;
			
			import widgets.TOC.DetailsWindow;
			import widgets.TOC.toc.TOC;
			
			import spark.components.supportClasses.ItemRenderer;
			
            private static const WEB_MERCATOR_IDS:Array = [ 102100, 3857, 102113 ];

            private var _item:Object;
            private var _layer:Layer;
            private var _map:Map;
            private var _transparencyMenuItem:TransparencyMenuItem;
			private var _toc:TOC;
			
			[Bindable] private var ZoomToMakeVisible:String = "";
			
			[Bindable] private var ExpandAll:String = "";
			
			[Bindable] private var CollapseAll:String = "";
			
			[Embed(source="widgets/TOC/assets/images/metadata.png")]
			[Bindable] private var _DescCls:Class;
			
			[Bindable] private var menuArrCol:ArrayCollection;

            private function bordercontainer1_initializeHandler(event:FlexEvent):void
            {
                if (GeometryServiceSingleton.instance.url) // using GeometryServiceSingleton
                {
                    geometryService.url = GeometryServiceSingleton.instance.url;
                    geometryService.token = GeometryServiceSingleton.instance.token;
                    geometryService.proxyURL = GeometryServiceSingleton.instance.proxyURL;
                }
            }

            public function popUpForItem(parent:DisplayObject, item:Object, map:Map, atX:Number, atY:Number):void
            {
				AppEvent.addListener(AppEvent.LAUNCHING_TOC_LAYER_MENU, newLayerMenuLaunching);
				
                _item = item;
                if (_item is TocMapLayerItem || _item is TocLayerInfoItem)
                {
                    _map = map;
					this.x = atX - 165;
					this.y = atY;
					PopUpManager.addPopUp(this, parent);
                    addOptionsMenuByType(_item, parent);
				}
            }
			
			private function addOptionsMenuByType(item:Object, parent:DisplayObject):void
			{
				//Create all menu items
				var menuItem_mu:MenuItem = new MenuItem;
				menuItem_mu.id = "moveup";
				menuItem_mu.icon = "assets/images/LayerUp16.png";
				menuItem_mu.label = resourceManager.getString('ViewerStrings', 'tocMapLayerMoveUpLabel');
				menuItem_mu.isGroup = false;
				
				var menuItem_md:MenuItem = new MenuItem;
				menuItem_md.id = "movedown";
				menuItem_md.icon = "assets/images/LayerDown16.png";
				menuItem_md.label = resourceManager.getString('ViewerStrings', 'tocMapLayerMoveDownLabel');
				menuItem_md.isGroup = true;
				
				var menuItem_desc:MenuItem = new MenuItem;
				menuItem_desc.id = "description";
				menuItem_desc.icon = "assets/images/GenericSpatialFile16.png";
				menuItem_desc.label = _layer is KMLLayer ? resourceManager.getString("ViewerStrings", "tocMapLayerDownloadLabel") : resourceManager.getString("ViewerStrings", "tocMapLayerDescriptionLabel");
				menuItem_desc.isGroup = false;
				
				var menuItem_zt:MenuItem = new MenuItem;
				menuItem_zt.id = "zoomto";
				menuItem_zt.icon = "assets/images/LayerZoomTo16.png";
				menuItem_zt.label = resourceManager.getString('ViewerStrings', 'tocMapLayerZoomToLabel');
				menuItem_zt.isGroup = false;
				
				var menuItem_t:MenuItem = new MenuItem;
				menuItem_t.id = "transparency";
				menuItem_t.icon = "assets/images/EffectsTransparency16.png";
				menuItem_t.label = resourceManager.getString('ViewerStrings', 'tocMapLayerTransparencyLabel');
				menuItem_t.isGroup = true;
				
				var menuItem_zsd:MenuItem = new MenuItem;
				menuItem_zsd.id = "zoomtoscaledependant";
				menuItem_zsd.icon = "widgets/TOC/assets/images/LayerZoomToScale16.png";
				menuItem_zsd.isGroup = false;
				
				var menuItem_ca:MenuItem = new MenuItem;
				menuItem_ca.id = "collapse";
				menuItem_ca.icon = "widgets/TOC/assets/images/LayerCollapse16.png";
				menuItem_ca.isGroup = true;
				
				var menuItem_ea:MenuItem = new MenuItem;
				menuItem_ea.id = "expand";
				menuItem_ea.icon = "widgets/TOC/assets/images/LayerExpand16.png";
				menuItem_ea.isGroup = false;
				
				if (parent is TOC){
					_toc = TOC(parent);
					ZoomToMakeVisible = _toc.ZoomToMakeVisible;
					ExpandAll = _toc.ExpandAll;
					CollapseAll = _toc.CollapseAll;
					menuItem_zsd.label = ZoomToMakeVisible;
					menuItem_ca.label = CollapseAll;
					menuItem_ea.label = ExpandAll;
					var tocMapLayerItems:ArrayCollection = _toc.dataProvider as ArrayCollection;
					
					menuArrCol = new ArrayCollection();
					var menuItem:MenuItem;
					
					//Remove the last item as it is the dummy item
					var obj:* = tocMapLayerItems.removeItemAt(tocMapLayerItems.length - 1);
					
					if(item is TocMapLayerItem){
						_layer = TocMapLayerItem(item).layer;
						if (_layer.initialExtent)
							menuArrCol.addItem(menuItem_zt);
						
						if(!isFeatureLayerChild(TocItem(item))){
							if(item.scaledependant)
								menuArrCol.addItem(menuItem_zsd);
							//if (item is TocLayerInfoItem || (item is TocMapLayerItem && TocMapLayerItem(item).layer is FeatureLayer))
							//	menuArrCol.addItem(menuItem_zsd);
						}
						if(item.scaledependant)
							if(!menuArrCol.contains(menuItem_zsd))
								menuArrCol.addItem(menuItem_zsd);
						menuArrCol.addItem(menuItem_t);
						
						if (tocMapLayerItems.length > 1){
							//Add the move layer up and down 
							if (TocMapLayerItem(tocMapLayerItems.getItemAt(0)).layer.id == _layer.id){
								menuArrCol.addItem(menuItem_md);
							}else if (TocMapLayerItem(tocMapLayerItems.getItemAt(tocMapLayerItems.length - 1)).layer.id == _layer.id){
								menuItem_mu.isGroup = true;
								menuArrCol.addItem(menuItem_mu);
							}else{
								menuArrCol.addItem(menuItem_mu);
								menuArrCol.addItem(menuItem_md);
							}
						}
						menuArrCol.addItem(menuItem_ea);
						menuArrCol.addItem(menuItem_ca);
						if (_toc.UseESRIDesc){
							if(!(_layer is FeatureLayer && FeatureLayer(_layer).featureCollection)){
								menuArrCol.addItem(menuItem_desc);
							}
						}else if (item.ttooltip && item.ttooltip != ""){
							menuArrCol.addItem(menuItem_desc);
						}
					}else if (item is TocLayerInfoItem){
						var menuItem_desc2:MenuItem = new MenuItem;						
						menuItem_desc2.id = "description";
						menuItem_desc2.icon = "assets/images/GenericSpatialFile16.png";
						menuItem_desc2.label = resourceManager.getString("ViewerStrings", "tocMapLayerDescriptionLabel");
						menuItem_desc2.isGroup = false;
						
						menuItem_zsd.label = ZoomToMakeVisible;
						if(item.scaledependant){
							menuArrCol.addItem(menuItem_zsd);
							if (item.ttooltip && item.ttooltip != "")
								menuItem_zsd.isGroup = true;
						}
						if (item.ttooltip && item.ttooltip != "")
							menuArrCol.addItem(menuItem_desc2);
					}
					//Add back the dummy item
					tocMapLayerItems.addItem(obj);
				}
				
				//ensure the menu does not go off the screen if the widget is at the bottom of the screen
				var appHeight:Number = FlexGlobals.topLevelApplication.height;
				var tocMenuGlobalBottomRightPoint:Point = localToGlobal(new Point(this.width, this.height));
				if ((tocMenuGlobalBottomRightPoint.y + (menuArrCol.length * 28)) > appHeight)
					this.y -= ((menuArrCol.length * 28) + 35);
			}

			/**
			 * Whether the specified TOC item is a child of a Feature Layer map service layer.
			 */
			private function isFeatureLayerChild(item:TocItem):Boolean
			{
				while (item)
				{
					item = item.parent;
					if (item is TocMapLayerItem)
					{
						if (TocMapLayerItem(item).layer is FeatureLayer)
						{
							return true;
						}
					}
				}
				return false;
			}
			
			private function expandAll(item:TocItem):void
			{
				item.collapsed = false;
				_toc.expandChildrenOf(item, true);
				if(item.isGroupLayer()){
					for each (var item2:TocItem in item.children){
						expandAll(item2);
					}
				}
			}
			
			private function collapseAll(item:TocItem):void
			{
				item.collapsed = true;
				_toc.expandItem(item, false, true, true, null);
				if(item.isGroupLayer()){
					for each (var item2:TocItem in item.children){
						collapseAll(item2);
					}
				}
			}

            public function remove():void
            {
                PopUpManager.removePopUp(_transparencyMenuItem);
                _transparencyMenuItem = null;
                PopUpManager.removePopUp(this);
            }

            private function zoomTo_clickHandler():void
            {   
                //remove transparency menu item
                if (_transparencyMenuItem){
                    PopUpManager.removePopUp(_transparencyMenuItem);
                    _transparencyMenuItem = null;
                }
                
                var layerExtent:Extent = _layer.initialExtent;
                if (_map.extent.spatialReference.wkid != layerExtent.spatialReference.wkid){
                    // convert client side.
                    if (WEB_MERCATOR_IDS.indexOf(_map.extent.spatialReference.wkid) != -1 && layerExtent.spatialReference.wkid == 4326){   
                        // clip the layer extent, so it's not going to Infinity; otherwise gives an error
                        layerExtent.xmin = Math.max(layerExtent.xmin, -180);
                        layerExtent.xmax = Math.min(layerExtent.xmax, 180);
                        layerExtent.ymin = Math.max(layerExtent.ymin, -89.99);
                        layerExtent.ymax = Math.min(layerExtent.ymax, 89.99);
                        layerExtent = WebMercatorUtil.geographicToWebMercator(layerExtent) as Extent;
                        updateMapExtent(layerExtent);
                    }
                    else if (WEB_MERCATOR_IDS.indexOf(layerExtent.spatialReference.wkid) != -1 && _map.extent.spatialReference.wkid == 4326)
                    {
                        layerExtent = WebMercatorUtil.webMercatorToGeographic(layerExtent) as Extent;
                        updateMapExtent(layerExtent);
                    }else{
                        // use geometryService.project()
                        geometryService.project([ layerExtent ], _map.extent.spatialReference);
                    }
                }else{   
                    updateMapExtent(layerExtent);
                }
				remove();
            }
			
			private function zoomToVis_clickHandler():void
			{   
				//remove transparency menu item
				if (_transparencyMenuItem){
					PopUpManager.removePopUp(_transparencyMenuItem);
					_transparencyMenuItem = null;
				}
				
				var item:TocItem = TocItem(_toc.selectedItem);
				if (item is TocLayerInfoItem){
					var item2:TocLayerInfoItem = item as TocLayerInfoItem;
					if ( _map.scale >= item2.minScale && item2.minScale != 0) {
						_map.scale = item2.minScale - 1;
						if(_map.level && _map.level > 0){
							if(item2.minScale < _map.lods[_map.level].scale)
								_map.level++;
						}
					} else if (_map.scale <= item2.maxScale && item2.maxScale != 0) {
						_map.scale = item2.maxScale + 1;
						if(_map.level && _map.level > 0){
							if(item2.maxScale > _map.lods[_map.level].scale)
								_map.level--;
						}
					}
				}else if (item is TocMapLayerItem){
					var item3:TocMapLayerItem = item as TocMapLayerItem;
					if ( _map.scale >= item3.minScale && item3.minScale != 0) {
						_map.scale = item3.minScale - 1;
						if(_map.level && _map.level > 0){
							if(item3.minScale < _map.lods[_map.level].scale)
								_map.level++;
						}
					} else if (_map.scale <= item3.maxScale && item3.maxScale != 0) {
						_map.scale = item3.maxScale + 1;
						if(_map.level && _map.level > 0){
							if(item3.maxScale > _map.lods[_map.level].scale)
								_map.level--;
						}
					}
				}
				remove();
			}

            private function geometryService_projectCompleteHandler(event:GeometryServiceEvent):void
            {
                updateMapExtent((event.result as Array)[0] as Extent);
            }

            private function updateMapExtent(layerExtent:Extent):void
            {
                _map.extent = layerExtent;
                if (!_map.extent.contains(layerExtent))
                    _map.level--;
            }

            private function transparency_clickHandler():void
            {
                if (!_transparencyMenuItem){
                    _transparencyMenuItem = new TransparencyMenuItem();

                    _transparencyMenuItem.x = FlexGlobals.topLevelApplication.layoutDirection == "rtl" ? this.x + (_transparencyMenuItem.width - 50) : this.x - _transparencyMenuItem.width;
                    _transparencyMenuItem.y = this.y;
                    _transparencyMenuItem.layer = _layer;
                    PopUpManager.addPopUp(_transparencyMenuItem, this.parent);
                }else{
                    PopUpManager.removePopUp(_transparencyMenuItem);
                    _transparencyMenuItem = null;
                }
            }

            private function moveUp_clickHandler():void
            {
                var currentIndex:Number = 0;
                for each (var layer:Layer in getLayersAfterRemovingHiddenLayers(_map.layers as ArrayCollection)){
                    if (_layer == layer)
                        break;
                    currentIndex++;
                }
                _map.reorderLayer(_layer.id, currentIndex + 1);
                remove();
            }

            private function moveDown_clickHandler():void
            {                   
                var currentIndex:Number = 0;
                for each (var layer:Layer in getLayersAfterRemovingHiddenLayers(_map.layers as ArrayCollection)){
                    if (_layer == layer)
                        break;
                    currentIndex++;
                }
                _map.reorderLayer(_layer.id, currentIndex - 1);
                remove();
            }
            
            private function getLayersAfterRemovingHiddenLayers(layers:ArrayCollection):Array
            {
                var result:Array=[];
                for (var i:int=0; i < layers.length; i++){
                    if (layers.getItemAt(i).name.indexOf("hiddenLayer_") == -1 && layers.getItemAt(i).name.indexOf("dummy") == -1)
                        result.push(layers.getItemAt(i));
                }
                return result; 
            }

            private function descriptionOrDownload_clickHandler():void
            {
				if (_toc.UseESRIDesc){
	                var url:String;
	                if (_layer is OpenStreetMapLayer){
	                    url = "http://www.openstreetmap.org";
	                }else if (_layer.hasOwnProperty("url")){
	                    url = Object(_layer).url;
	                    if (_layer is WMSLayer)
	                        url += "?SERVICE=WMS&REQUEST=GetCapabilities";
	                }
	                if (url){
	                    var request:URLRequest = new URLRequest(url);
	                    navigateToURL(request, _layer.id);
	                }
				}else{
					if (_toc.selectedItem is TocItem) {
						var item:TocItem = TocItem(_toc.selectedItem);
						if(item.ttooltip && item.ttooltip != ""){
							var mydetailswindow:DetailsWindow;
							mydetailswindow = DetailsWindow(PopUpManager.createPopUp(_map,DetailsWindow,false,PopUpManagerChildList.POPUP));
							mydetailswindow.windowDetails = item.ttooltip;
							mydetailswindow.iconDisplay.source = _DescCls;
							mydetailswindow.detailsTitle = item.label;
							PopUpManager.centerPopUp(mydetailswindow);
						}
					}
				}
				remove();
            }

            private function bordercontainer1_rollOverHandler(event:MouseEvent):void
            {
                AppEvent.dispatch(AppEvent.SUSPEND_TOC_HIDE_TIMER, "true");
            }

            private function bordercontainer1_rollOutHandler(event:MouseEvent):void
            {
                AppEvent.dispatch(AppEvent.SUSPEND_TOC_HIDE_TIMER, null);
            }

            private function newLayerMenuLaunching(event:AppEvent):void
            {
                this.remove();
            }
			
			protected function collapse_clickHandler():void
			{
				var _tocRoots:ArrayCollection = _toc.dataProvider as ArrayCollection;
				for (var i:int = 0; i < _tocRoots.length - 1; i++)
				{
					const item:TocItem = _tocRoots[i];
					collapseAll(item);
					_tocRoots.refresh();
				}
				remove();
			}
			
			protected function expand_clickHandler():void
			{
				const _tocRoots:ArrayCollection = _toc.dataProvider as ArrayCollection; 
				for (var i:int = 0; i < _tocRoots.length - 1; i++)
				{
					const item:TocItem = _tocRoots[i];
					expandAll(item);
					_tocRoots.refresh();
				}
				remove();
			}
			
			protected function menuListDG_menuItemClickHandler(event:Event):void
			{
				var menuItem:MenuItem = ItemRenderer(event.target).data as MenuItem;
				
				switch(menuItem.id){
					case "moveup":{
						moveUp_clickHandler();
						break;
					}
					case "movedown":{
						moveDown_clickHandler();
						break;
					}
					case "description":{
						descriptionOrDownload_clickHandler();
						break;
					}
					case "zoomto":{
						zoomTo_clickHandler();
						break;
					}
					case "transparency":{
						transparency_clickHandler();
						break;
					}
					case "zoomtoscaledependant":{
						zoomToVis_clickHandler();
						break;
					}
					case "expand":{
						expand_clickHandler();
						break;
					}
					case "collapse":{
						collapse_clickHandler();
						break;
					}
				}
			}
			
		]]>
    </fx:Script>
    <fx:Declarations>
        <esri:GeometryService id="geometryService"
                              projectComplete="geometryService_projectCompleteHandler(event)"
                              url="http://tasks.arcgisonline.com/ArcGIS/rest/services/Geometry/GeometryServer"/>
    </fx:Declarations>
    <s:layout>
        <s:VerticalLayout gap="0"/>
    </s:layout>
    
	<Toc:MenuItemDataGroup id="menuListDG"
						   width="161"
						   dataProvider="{menuArrCol}"
						   menuItemClick="menuListDG_menuItemClickHandler(event)">
		<Toc:layout>
			<s:VerticalLayout paddingTop="6"
							  useVirtualLayout="false"
							  verticalAlign="middle"/>
		</Toc:layout>
	</Toc:MenuItemDataGroup>
</s:BorderContainer>
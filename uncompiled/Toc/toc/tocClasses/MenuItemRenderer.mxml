<?xml version="1.0" encoding="utf-8"?>
<!--
     ////////////////////////////////////////////////////////////////////////////////
     //
     // Copyright (c) 2010-2011 Esri
     //
     // All rights reserved under the copyright laws of the United States.
     // You may freely redistribute and use this software, with or
     // without modification, provided you include the original copyright
     // and use restrictions.  See use restrictions in the file:
     // <install location>/License.txt
     //
     ////////////////////////////////////////////////////////////////////////////////
-->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:mx="library://ns.adobe.com/flex/mx"
                width="100%"
                autoDrawBackground="false"
                buttonMode="true"
                click="itemrenderer_clickHandler(event)"
                dataChange="itemrenderer_dataChangeHandler(event)"
                minHeight="22"
                useHandCursor="true">

    <fx:Script>
        <![CDATA[
            import flashx.textLayout.formats.TextAlign;
            
            import mx.events.EffectEvent;
            import mx.events.FlexEvent;

            private const MENU_ITEM_CLICK:String = "menuItemClick";

            [Bindable] private var menuItem:MenuItem;
			
			[Bindable] private var ulRad:int = 0;
			[Bindable] private var urRad:int = 0;
			[Bindable] private var llRad:int = 0;
			[Bindable] private var lrRad:int = 0;

            private function itemrenderer_dataChangeHandler(event:FlexEvent):void
            {
                menuItem = data as MenuItem;
                icon.source = menuItem.icon;

                // set style on the label
                iLabel.setStyle("textAlign", TextAlign.CENTER);
                iLabel.text = menuItem.label;
				if(itemIndex == 0){
					llRad = (event.currentTarget.parent.dataProvider.length == 1)? 4 : 0;
					lrRad = (event.currentTarget.parent.dataProvider.length == 1)? 4 : 0;
					ulRad = 4;
					urRad = 4;
					scs.alpha = 0.3;
				}else if(itemIndex == event.currentTarget.parent.dataProvider.length -1){
					llRad = 4;
					lrRad = 4;
					ulRad = 0;
					urRad = 0;
					scs.alpha = 0;
				}else{
					llRad = 0;
					lrRad = 0;
					ulRad = 0;
					urRad = 0;
					scs.alpha = 0.3;
				}
            }

            private function itemrenderer_clickHandler(event:MouseEvent):void
            {
                dispatchEvent(new Event(MENU_ITEM_CLICK, true)); // bubbles
            }
        ]]>
    </fx:Script>

    <s:states>
        <s:State name="normal"/>
        <s:State name="hovered"/>
    </s:states>

    <!-- border/background rectangle -->
    <s:Rect left="0" right="-2"
			top="-6" bottom="0"
            topLeftRadiusX="{ulRad}"
			topRightRadiusX="{urRad}"
			topLeftRadiusY="{ulRad}"
			topRightRadiusY="{urRad}"
            bottomLeftRadiusX="{llRad}"
			bottomLeftRadiusY="{llRad}"
			bottomRightRadiusX="{lrRad}"
			bottomRightRadiusY="{lrRad}">
        <s:fill>
            <s:SolidColor alpha="0.3"
                          alpha.hovered="1"
                          color.hovered="{getStyle('rollOverColor')}"
                          color.normal="{getStyle('contentBackgroundColor')}"/>
        </s:fill>
    </s:Rect>
    <s:VGroup width="100%" height="100%" gap="-1">
		<s:HGroup id="iGroup"
				  paddingLeft="10"
				  buttonMode="true"
				  useHandCursor="true"
				  verticalAlign="middle"
				  paddingRight="3">
			<mx:Image id="icon" />
			<s:Label id="iLabel" verticalAlign="middle"
					 color="{getStyle('color')}"/>
		</s:HGroup>
		
    </s:VGroup>
	<s:Line id="divider" includeInLayout="{menuItem.isGroup}" visible="{menuItem.isGroup}"
			bottom="0" right="-2" left="0">
		<s:stroke>
			<s:SolidColorStroke id="scs" alpha="0.3"
								caps="square"
								color="{getStyle('accentColor')}"
								weight="2"/>
		</s:stroke>
	</s:Line>
</s:ItemRenderer>
<?xml version="1.0" encoding="utf-8"?>
<!--Version 2.5-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:mx="library://ns.adobe.com/flex/mx"
                   xmlns:viewer="com.esri.viewer.*"
				   xmlns:Toc="widgets.TOC.*"
                   xmlns:toccomp="widgets.TOC.toc.*"
				   xmlns:esri="http://www.esri.com/2008/ags"
                   widgetConfigLoaded="init()"
				   mouseDown="wTemplate_clickHandler(event)"
                   x="600"
                   y="400">
	
    <fx:Script>
        <![CDATA[
			import com.esri.ags.events.MapEvent;
			import com.esri.ags.layers.FeatureLayer;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.layers.Layer;
			import com.esri.viewer.AppEvent;
			import com.esri.viewer.ViewerContainer;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			
			[Event(name="layervischanged", type="flash.events.Event")]
			private static const LAYER_VIS_CHANGED:String = "layervischanged";
			
            private const ICON_URL:String = "widgets/TOC/assets/images/";
			
			[Embed(source="widgets/TOC/assets/images/plus.png")]
			public var plus:Class;
			
			[Embed(source="widgets/TOC/assets/images/minus.png")]
			public var minus:Class;
			
			[Bindable] private var expanded:Boolean = false;
			
			[Bindable] private var legendCollapsed:Boolean = false;
			
			[Bindable] private var UseNewEsriDescrption:Boolean = false;
			
			//label
			[Bindable] 	private var layerVisibility:String;
			
			[Bindable]	private var lTimeout:int = 60;
			
			[Bindable] 	private var excludedLayers:ArrayCollection;
			
			private var excludeGraphicsLayers:Boolean = false;
			
			[Bindable] 	private var ZoomToExtent:String;
			
			[Bindable] 	private var ZoomToMakeVisible:String;
			
			[Bindable] 	private var ExpandAll:String;
			
			[Bindable] 	private var CollapseAll:String;
			
			[Bindable] 	private var GeneratingLegendMsg:String;

            private function init():void
            {
                if (configXML)
                {
					ZoomToExtent = configXML.labels.zoomtoextent || "Zoom To Layer Extent";
					ZoomToMakeVisible = configXML.labels.zoomtomakevisible || "Zoom To Make Visible";
					ExpandAll = configXML.labels.expandall || "Expand All Layers";
					CollapseAll = configXML.labels.collapseall || "Collapse All Layers";
					layerVisibility = configXML.labels.visibilitylabel || getDefaultString("layerListTitle");;
					GeneratingLegendMsg = configXML.labels.generatinglegendmsg || "Generating TOC Legend";
					lTimeout = configXML.legendtimeout || 60;
					expanded = configXML.tocsettings.expanded && configXML.tocsettings.expanded == "true";
					legendCollapsed = configXML.tocsettings.collapselegends && configXML.tocsettings.collapselegends == "true";
					UseNewEsriDescrption = configXML.usenewesridescription && configXML.usenewesridescription == "true";
                    toc.map = map;
                    toc.isMapServiceOnly = false; //gotta get this from the config file
					toc.excludeGraphicsLayers = configXML.excludegraphiclayers &&  configXML.excludegraphiclayers == "true";
					toc.setStyle("disclosureOpenIcon", minus);
					toc.setStyle("disclosureClosedIcon", plus);
					
					excludedLayers = new ArrayCollection;
					excludeGraphicsLayers = configXML.excludegraphiclayers && configXML.excludegraphiclayers == "true";
					if (configData && configData.basemaps){
						if(configXML.excludebasemaplayers && configXML.excludebasemaplayers == "true"){
							var bname:String;
							// exclude basemaps
							for (var b:int = 0; b < configData.basemaps.length; b++)
							{
								bname = configData.basemaps[b].label;
								var excludesb:Object =
									{
										name: bname,
										ids: null
									}
								excludedLayers.addItem(excludesb);
							}
						}
					}
					
					var excludeList:XMLList = configXML..excludelayer;
					for (var i:Number = 0; i < excludeList.length(); i++)
					{
						var name:String = excludeList[i].@mapservice;
						var ids:String = excludeList[i];
						var idsArray:Array = ids.split(",");
						if(idsArray[0] == "")
							idsArray = null;
						var excludes:Object =
							{
								name: name,
								ids: idsArray
							}
						excludedLayers.addItem(excludes);
					}
                }
				toc.excludeLayers = excludedLayers;
				scr.addEventListener(MouseEvent.MOUSE_WHEEL, bumpDelta, true);
            }

			private function getExcludeLayers():ArrayCollection
			{
				var result:ArrayCollection = new ArrayCollection();
				
				if (configData && configData.basemaps)
				{
					if(configXML.excludebasemaplayers &&  configXML.excludebasemaplayers == "true")
					{
						// exclude basemaps
						for (var i:int = 0; i < configData.basemaps.length; i++)
						{
							result.addItem(configData.basemaps[i].label);
						}
					}
				}
				
				if (configXML)
				{
					// exclude these layers
					var layers:XMLList = configXML..excludelayer as XMLList;
					for (var j:Number = 0; j < layers.length(); j++)
					{
						result.addItem(layers[j].toString());
					}
				}
				
				return result;
			}
			
			protected function bumpDelta(event:MouseEvent):void
			{
				event.delta *= 0.5;
			}
			
			protected function wTemplate_clickHandler(event:MouseEvent):void
			{
				AppEvent.dispatch(AppEvent.TOC_HIDDEN); // always hide the layer options popup
			}
			
		]]>
    </fx:Script>
    <viewer:WidgetTemplate id="wTemplate"
                           height="300"
                           skinClass="com.esri.viewer.skins.WidgetTemplateSkin"
                           width="380">
        <s:VGroup id="showTOC"
				  visible="true"
				  gap="8"
                  height="100%"
                  paddingTop="4"
                  width="100%">
			<s:Label styleName="WidgetText" text="{layerVisibility}" paddingLeft="6"/>
			<s:Scroller id="scr" width="100%" height="100%">
				<s:Group>
					<s:layout>
						<s:VerticalLayout gap="1"/>
					</s:layout>
					<s:HGroup id="boxMessage"
							  width="100%"
							  includeInLayout="false"
							  visible="false" 
							  verticalAlign="middle"
							  horizontalAlign="center">
						<mx:Image id="swfMessage"
								  source="widgets/TOC/assets/images/loader.swf"/>
						<s:Label id="txtMessage"
								 width="90%"
								 text="{GeneratingLegendMsg}"/>
					</s:HGroup>
					<toccomp:TOC id="toc"
								 width="100%"
								 height="100%"
								 labels="{[ZoomToMakeVisible,ExpandAll,CollapseAll]}"
								 useesridescription="{UseNewEsriDescrption}"
								 expanded="{expanded}"
								 legendCollapsed="{legendCollapsed}"
								 liveScrolling="false"
								 variableRowHeight="true"
								 tocMinWidth="{wTemplate.width - 45}"
								 scroller="{scr}"
								 loader="{boxMessage}"/>
				</s:Group>
			</s:Scroller>
    </s:VGroup>
    </viewer:WidgetTemplate>
</viewer:BaseWidget>